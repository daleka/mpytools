import * as vscode from 'vscode';
import * as os from 'os';
import * as path from 'path';
import { spawn } from 'child_process';

/**
 * –†–µ–≥—ñ—Å—Ç—Ä—É—î –∫–æ–º–∞–Ω–¥—É "mpytools.installDependencies".
 * –õ–æ–≥—ñ–∫–∞ –≤–∏–∫–ª–∏–∫—É —Å–∫—Ä–∏–ø—Ç—ñ–≤ (PowerShell / Bash) —Ä–æ–∑–º—ñ—â–µ–Ω–∞ —Ç—É—Ç.
 *
 * @param context  - –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è
 * @param outputChannel - —î–¥–∏–Ω–∏–π Output Channel –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
 */
export function registerDependenciesCommand(
  context: vscode.ExtensionContext,
  outputChannel: vscode.OutputChannel
) {
  const disposable = vscode.commands.registerCommand('mpytools.installDependencies', async () => {
    const extensionRoot = context.extensionPath;
    let scriptPath = '';
    let args: string[] = [];

    // –í–∏–∑–Ω–∞—á–∏–º–æ, —è–∫–∏–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞—Ç–∏ (Windows / Linux/Mac)
    if (os.platform() === 'win32') {
      scriptPath = path.join(extensionRoot, 'install-dependencies.ps1');
      // –î–ª—è Windows –∑–∞–ø—É—Å–∫–∞—î–º–æ —á–µ—Ä–µ–∑ PowerShell –∑ –ø–æ–ª—ñ—Ç–∏–∫–æ—é Bypass
      args = ['-ExecutionPolicy', 'Bypass', '-File', scriptPath];
    } else {
      scriptPath = path.join(extensionRoot, 'install-dependencies.sh');
      // –î–ª—è Linux/Mac –∑–∞–ø—É—Å–∫–∞—î–º–æ —á–µ—Ä–µ–∑ bash
      args = [scriptPath];
    }

    // –ü–æ–∫–∞–∑—É—î–º–æ –∫–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–æ–≥—Ä–µ—Å —É Notification, –∞ –¥–µ—Ç–∞–ª—å–Ω–∏–π –ª–æ–≥ —É Output Channel
    vscode.window.withProgress({
      location: vscode.ProgressLocation.Notification,
      title: 'Installing dependencies...',
      cancellable: false
    }, () => {
      return new Promise<void>((resolve, reject) => {

        // –û—á–∏—â—É—î–º–æ –∫–∞–Ω–∞–ª
        outputChannel.clear();
        // –ó—Ä–æ–±–∏–º–æ –∫–∞–Ω–∞–ª –∞–∫—Ç–∏–≤–Ω–∏–º (—â–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –±–∞—á–∏–≤ –ª–æ–≥)
        outputChannel.show(false);

        outputChannel.appendLine("üîπ Starting dependency installation...");
        outputChannel.appendLine(`   Script: ${scriptPath}`);

        const command = (os.platform() === 'win32') ? 'powershell' : 'bash';
        const installer = spawn(command, args);

        // –ó –∫–æ–∂–Ω–æ–≥–æ —Ä—è–¥–∫–∞ stdout —Ä–æ–±–∏–º–æ –æ–±—Ä–æ–±–∫—É:
        installer.stdout.on('data', (data) => {
          const text = data.toString().trim();
          if (!text) {
            return;
          }
          // –í–∏–≤–æ–¥–∏–º–æ –≤ –ª–æ–≥, –∞ —Ç–∞–∫–æ–∂ –º–æ–∂–Ω–∞ –ø—ñ–¥–º—ñ–Ω—è—Ç–∏ –µ–º–æ–¥–∑—ñ, —è–∫—â–æ —Ç—Ä–µ–±–∞
          const lines = text.split('\n');
          for (const line of lines) {
            let niceLine = line;

            // –ü—ñ–¥–º—ñ–Ω–∞ –¥–µ—è–∫–∏—Ö —Ä—è–¥–∫—ñ–≤ –Ω–∞ –µ–º–æ–¥–∑—ñ
            if (line.includes("Checking for Python...")) {
              niceLine = "üîπ Checking for Python...";
            } else if (line.includes("SUCCESS: Python found!")) {
              niceLine = "‚úÖ Python found!";
            } else if (line.includes("Upgrading pip...")) {
              niceLine = "üîπ Upgrading pip...";
            } else if (line.includes("Installing mpremote...")) {
              niceLine = "üîπ Installing mpremote...";
            } else if (line.includes("Installing mpy-cross...")) {
              niceLine = "üîπ Installing mpy-cross...";
            } else if (line.includes("Installing micropython-stdlib-stubs...")) {
              niceLine = "üîπ Installing micropython-stdlib-stubs...";
            } else if (line.includes("SUCCESS: All dependencies installed!")) {
              niceLine = "‚úÖ All dependencies installed!";
            }

            outputChannel.appendLine(niceLine);
          }
        });

        installer.stderr.on('data', (data) => {
          const errMsg = data.toString().trim();
          if (errMsg) {
            outputChannel.appendLine("‚ùå ERROR: " + errMsg);
          }
        });

        installer.on('close', (code) => {
          if (code === 0) {
            vscode.window.showInformationMessage("‚úÖ All dependencies installed!");
            outputChannel.appendLine("‚úÖ Installation completed.");
            resolve();
          } else {
            vscode.window.showErrorMessage(`Dependency installation failed with code ${code}`);
            outputChannel.appendLine(`‚ùå Installation failed with code ${code}`);
            reject(new Error(`Installation failed with code ${code}`));
          }
        });
      });
    });
  });

  context.subscriptions.push(disposable);
}
